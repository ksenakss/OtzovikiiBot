from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from keyboards.all_keyboards import admin_keyboard, main_keyboard, admins
from db_handler.database_manager import DatabaseManager
from decouple import config
from datetime import datetime, timedelta
import logging

admin_router = Router()

auth_params = {
    'user': config('user'),
    'password': config('password'),
    'host': config('host'),
    'port': config('port'),
    'database': config('database')
}

@admin_router.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id not in admins:
        logging.warning("Non-admin user %s tried to access admin panel", message.from_user.id)
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    try:
        logging.info("Admin panel accessed by user %s", message.from_user.id)
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        db_manager = DatabaseManager(**auth_params)
        async with db_manager as manager:
            try:
                
                total_users = await manager.fetch_data("SELECT COUNT(*) FROM users")
                total_requests = await manager.fetch_data("SELECT COUNT(*) FROM requests")
                total_responses = await manager.fetch_data("SELECT COUNT(*) FROM response")
                
                
                stages_stats = await manager.fetch_data("""
                    SELECT stage, COUNT(*) as count 
                    FROM requests 
                    GROUP BY stage 
                    ORDER BY stage
                """)
                
                
                successful_requests = await manager.fetch_data("""
                    SELECT COUNT(*) 
                    FROM requests 
                    WHERE success = true
                """)
                
                
                last_24h = datetime.now() - timedelta(days=1)
                recent_requests = await manager.fetch_data("""
                    SELECT COUNT(*) 
                    FROM requests 
                    WHERE madeat >= $1
                """, last_24h)
                
                recent_responses = await manager.fetch_data("""
                    SELECT COUNT(*) 
                    FROM response 
                    WHERE created_at >= $1
                """, last_24h)
                
                
                stats_message = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users[0]['count']}\n"
                    f"üîç –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests[0]['count']}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests[0]['count']}\n"
                    f"üìù –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses[0]['count']}\n\n"
                    "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
                    f"üîç –ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {recent_requests[0]['count']}\n"
                    f"üìù –ù–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {recent_responses[0]['count']}\n\n"
                    "üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º:</b>\n"
                )
                
                
                for stage in stages_stats:
                    stage_name = await manager.fetch_data(
                        "SELECT name FROM vocab_request_stage WHERE id = $1",
                        stage['stage']
                    )
                    stats_message += f"‚Ä¢ {stage_name[0]['name']}: {stage['count']}\n"
                
                logging.info("Statistics successfully gathered for user %s", message.from_user.id)
                await message.answer(stats_message, reply_markup=admin_keyboard())
                
            except Exception as e:
                logging.error("Database error in admin panel: %s", str(e))
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                
    except Exception as e:
        logging.error("General error in admin panel: %s", str(e))
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_router.message(lambda message: message.text == "üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def refresh_stats(message: types.Message, state: FSMContext):
    if message.from_user.id not in admins:
        return
    await admin_panel(message, state)

@admin_router.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main(message: types.Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(message.from_user.id))
    await state.clear()