from aiogram import Router, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
import time
from keyboards.all_keyboards import main_keyboard, inline_keyboard_for_approve
from states.bot_states import ProductSearch  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ ProductSearch
from db_handler.main_handler import insertInUsers, addRequest, updateNameRequestByUserId, updateStageRequestByUserId, cache_reviews
from datetime import datetime
from parsers.findRequiredItem import findRequiredItem, findReviewsOnMarketplaces
from gptRequests.gptRequests import gptRequest

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: types.Message):
    data = {
        "id": message.from_user.id,
        "name": str(message.from_user.full_name)
    }
    await insertInUsers(data)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!", reply_markup=main_keyboard(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"
@start_router.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
async def find_product_start(message: types.Message, state: FSMContext):
    data = {
        "name": "",
        "madeAt": datetime.now(),
        "success": False,
        "stage": 1,
        "user_id": message.from_user.id
    }
    await addRequest(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(ProductSearch.waiting_for_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
@start_router.message(StateFilter(ProductSearch.waiting_for_query))
async def process_product_query(message: types.Message, state: FSMContext):
    query = message.text
    user_id = message.from_user.id
    print(f"Processing query from user {user_id}: {query}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    await updateNameRequestByUserId(query, user_id)
    await updateStageRequestByUserId(2, user_id)
    await state.update_data(query=query, user_id=user_id)

    global approval
    try:
        caption, photo_url = findRequiredItem(query)
        if not caption or not photo_url:
            print(f"No product found for query: {query}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        print(f"Found product: {caption}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await state.update_data(url=caption)
        approval = await message.answer_photo(photo=photo_url,
                                   caption="–≠—Ç–æ —Ç–æ—Ç —Ç–æ–≤–∞—Ä? \n" + caption,
                                   reply_markup=inline_keyboard_for_approve()
                                   )
        await updateStageRequestByUserId(3, message.from_user.id)
        await state.set_state(ProductSearch.waiting_for_approval)
    except Exception as e:
        print(f"Error in process_product_query: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@start_router.callback_query(lambda callback_query: callback_query.data in ["yes", "no"])
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    user_query = data.get("query")
    print(f"Processing callback for user {user_id}, query: {user_query}")
    
    await updateStageRequestByUserId(4, user_id)
    await approval.delete()
    
    if callback_query.data == "yes":
        sent_message = await callback_query.message.answer("üîç –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤... üîç")
        try:
            url = data.get("url")
            print(f"Searching reviews for URL: {url}")
            reviews = await findReviewsOnMarketplaces(url, user_query)
            print(f"Reviews search completed. Found {len(reviews) if reviews else 0} reviews")
            
            if not reviews:
                print("No reviews found")
                await sent_message.delete()
                await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
                return
                
            print(f"Found {len(reviews)} reviews, analyzing...")
            item_title = user_query
            responce = await gptRequest(reviews=reviews, item_title=item_title)
            
            # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –∏ –æ—Ç–≤–µ—Ç GPT
            print(f"Caching reviews for item: {item_title}")
            try:
                print(f"Reviews to cache: {reviews}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
                await cache_reviews(
                    item_title=item_title,
                    user_query=user_query,
                    product_url=url,
                    wb_reviews=reviews,  # –í—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
                    ozon_reviews=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –≤ wb_reviews
                    yandex_reviews=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è yandex
                    gpt_analysis=responce,
                    ttl_days=7  # –•—Ä–∞–Ω–∏—Ç—å –∫—ç—à 7 –¥–Ω–µ–π
                )
                print("Reviews cached successfully")
            except Exception as e:
                print(f"Error caching reviews: {str(e)}")
                print(f"Reviews that caused error: {reviews}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            await sent_message.delete()
            await callback_query.message.answer(responce)
        except Exception as e:
            print(f"Error in process_callback: {str(e)}")
            await sent_message.delete()
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif callback_query.data == "no":
        await callback_query.message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ")
        await state.set_state(ProductSearch.waiting_for_query)
