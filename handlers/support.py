from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from keyboards.all_keyboards import support_keyboard, main_keyboard
from keyboards.all_keyboards import admins

support_router = Router()

@support_router.message(lambda message: message.text == "üôè –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message, state: FSMContext):
    support_text = (
        "ü§ñ <b>–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å:\n\n"
        "üìã <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        "‚Ä¢ –ö–∞–∫ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã?\n"
        "  –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä' –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞\n\n"
        "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤?\n"
        "  –ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
        "‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è?\n"
        "  –ë–æ—Ç –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n\n"
        "‚ö†Ô∏è <b>–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ:</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"
    )
    await message.answer(support_text, reply_markup=support_keyboard())

@support_router.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main(message: types.Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(message.from_user.id))
    await state.clear()

@support_router.message(lambda message: message.text == "üìù –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")
async def report_issue(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å?\n"
        "‚Ä¢ –ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏?\n"
        "‚Ä¢ –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è."
    )
    await state.set_state("waiting_for_issue_description")

@support_router.message(lambda message: message.text == "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
async def how_to_use(message: types.Message):
    help_text = (
        "üìñ <b>–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–ª—é—Å–∞–º–∏ –∏ –º–∏–Ω—É—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–∞\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
        "‚Ä¢ –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    await message.answer(help_text)

@support_router.message(lambda message: message.text and message.text != "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and message.text != "üìù –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" and message.text != "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
async def handle_issue_description(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "waiting_for_issue_description":
        admin_message = (
            f"‚ö†Ô∏è <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ</b>\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.full_name} (ID: {message.from_user.id})\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
        )
        
        for admin_id in admins:
            try:
                await message.bot.send_message(admin_id, admin_message, parse_mode="HTML")
            except Exception as e:
                print(f"Failed to send message to admin {admin_id}: {e}")
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_keyboard(message.from_user.id)
        )
        await state.clear()